// frontend/src/ResetPassword.jsx
import React, { useState, useContext, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from './context/AuthContext'; // Import AuthContext (though not directly used for user state logic here)
import { supabase } from './lib/supabaseClient'; // Direct Supabase import for updateUser
import './Login.css'; // Reusing Login styling for consistency

function ResetPassword() {
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  // The AuthContext's user/loading state is not directly needed for the core functionality
  // of this page, as supabase.auth.updateUser relies on the session from the URL hash.
  // We keep the useContext import if other parts of the component might eventually use it.
  // const { user, loading: authLoading } = useContext(AuthContext); 

  // REMOVED THE PREVIOUS useEffect BLOCK THAT WAS CAUSING UNWANTED REDIRECTION
  // The page will now simply render. If the session from the URL is invalid,
  // the supabase.auth.updateUser call will fail and show an error.


  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage(null);
    setError(null);
    setLoading(true);

    if (newPassword !== confirmPassword) {
      setError('Passwords do not match.');
      setLoading(false);
      return;
    }

    if (newPassword.length < 6) { // Supabase default minimum password length
        setError('Password must be at least 6 characters long.');
        setLoading(false);
        return;
    }

    try {
      // Use supabase.auth.updateUser to set the new password
      // This automatically uses the session from the URL hash generated by the reset link
      const { error: updateError } = await supabase.auth.updateUser({
        password: newPassword,
      });

      if (updateError) {
        throw new Error(updateError.message);
      }

      setMessage('Your password has been successfully updated! You can now log in with your new password.');
      setNewPassword('');
      setConfirmPassword('');
      // Redirect to login page after a short delay
      setTimeout(() => {
        navigate('/login');
      }, 3000); // Redirect after 3 seconds
    } catch (err) {
      console.error('Password update failed:', err);
      setError(err.message || 'Failed to update password. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <img src="/logo.png" alt="Michael API Logo" className="login-logo" />
        <h2>Set New Password</h2>
        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <label htmlFor="newPassword">New Password:</label>
            <input
              type="password"
              id="newPassword"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              placeholder="Enter your new password"
              required
            />
          </div>
          <div className="form-group">
            <label htmlFor="confirmPassword">Confirm New Password:</label>
            <input
              type="password"
              id="confirmPassword"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              placeholder="Confirm your new password"
              required
            />
          </div>
          {message && <p className="success-message">{message}</p>}
          {error && <p className="error-message">{error}</p>}
          <button type="submit" disabled={loading} className="login-button">
            {loading ? 'Setting Password...' : 'Set Password'}
          </button>
        </form>
        <p className="register-link">
          <span onClick={() => navigate('/login')}>Back to Login</span>
        </p>
      </div>
    </div>
  );
}

export default ResetPassword;